apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.firebase.firebase-crash'

android {
  signingConfigs {
    release
  }
  def props = new Properties()

  props.load(new FileInputStream(rootProject.file("signing.conf")))
  android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
  android.signingConfigs.release.storePassword props.keyStorePassword
  android.signingConfigs.release.keyAlias props.keyAlias
  android.signingConfigs.release.keyPassword props.keyAliasPassword

  compileSdkVersion Build.compileSdkVersion
  defaultConfig {
    applicationId "asvid.counter"
    minSdkVersion Build.minSdkVersion
    targetSdkVersion Build.targetSdkVersion
    versionCode Build.versionCode
    versionName Build.versionName

    vectorDrawables.useSupportLibrary = true
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      zipAlignEnabled true
    }
  }
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
  lintOptions {
    abortOnError false
  }
}

dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')
  implementation External.kotlin
  implementation Support.appcompat
  implementation Support.preference
  implementation Support.recyclerView
  implementation Support.cardView
  implementation Support.design
  implementation Support.constraint
  implementation Firebase.core
  implementation Firebase.crash
  implementation Firebase.messaging

  //  color picker
  implementation External.colorPicker
  //  colors for color picker
  implementation External.materialColors

  //  logging
  implementation External.timber

  //  vector icons
  implementation External.vectorIcons
  implementation External.vectorIconsViews
  implementation External.fontAwesomeIcons

  //  charts
  implementation External.charts

  //  pretty time
  implementation External.prettyTime
  //  RX
  implementation External.rxjava2
  implementation External.rxrelay2
  implementation External.rxbinding

  //  room
  implementation External.roomRuntime
  implementation External.roomRx
  annotationProcessor Apt.roomCompiler
  kapt Apt.roomCompiler

  //  DI
  implementation External.dagger
  implementation External.daggerSupport
  annotationProcessor Apt.daggerCompiler
  kapt Apt.daggerCompiler

  debugCompile External.leakcanaryDebug
  releaseCompile External.leakcanaryRelease
  testCompile External.leakcanaryRelease
}

apply plugin: 'com.google.gms.google-services'